import telebot
import requests
import exchange_rate_for_bot
import speech_recognition as SRG
# import yt_dlp as youtube_dl
from pydub import AudioSegment
from modules import config
from random import randint, choice
from telebot import types
from os import stat
from googletrans import Translator

bot = telebot.TeleBot(config.TOKEN)


# –ö–æ–º–∞–Ω–¥—ã

# start
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id == config.AdminID:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Ö–æ–∑—è–∏–Ω')
        bot.send_sticker(message.chat.id, open(
            'stikers/KitayPartiya.webp', 'rb'))
    else:
        if message.from_user.last_name == None:
            bot.send_message(
                message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}")

        else:
            bot.send_message(
                message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} {message.from_user.last_name}")


# help
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(
        message.chat.id, '–ü–æ–º–æ—â—å –ø—Ä–∏—à–ª–∞ –Ω–∞ –ø–æ–º–æ—â—å')
    bot.send_message(message.chat.id, f'''
/start - –ó–∞–ø—É—Å–∫/–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å
/exchange_rate - –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
/add - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
/remove - –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
/check - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫
/myid - –£–∑–Ω–∞—Ç—å –º–æ–π ID
/random - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
/hello - –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ—Ç–∞
/seabattle - –°—ã–≥—Ä–∞—Ç—å –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π (–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç)
/thebestwaifu - –û—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ –ª—É—á—à–µ–π –≤–∞–π—Ñ—É
''')


# exchange rate
@bot.message_handler(commands=['exchange_rate'])
def exchange_rate(message):
    markup = types.InlineKeyboardMarkup(row_width=2)  # resize_keyboard=True,
    USD = types.InlineKeyboardButton(text='–î–æ–ª–ª–∞—Ä', callback_data='dollar')
    EUR = types.InlineKeyboardButton(text='–ï–≤—Ä–æ', callback_data='euro')
    # TJS = types.KeyboardButton('–°–æ–º–æ–Ω–∏')
    # UAH = types.KeyboardButton('–ì—Ä–∏–≤–Ω–∞')
    # BYN = types.KeyboardButton('–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
    # KZT = types.KeyboardButton('–¢–µ–Ω–≥–µ')
    # CNY = types.KeyboardButton('–Æ–∞–Ω—å')
    # GBP = types.KeyboardButton('–§—É–Ω—Ç')
    # TRY = types.KeyboardButton('–õ–∏—Ä–∞')
    # JPY = types.KeyboardButton('–ô–µ–Ω–∞')
    # MDL = types.KeyboardButton('–ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π')
    markup.add(USD, EUR)  # , TJS, UAH, BYN, KZT, CNY, GBP, TRY, JPY, MDL
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=markup)


# hello
@bot.message_handler(commands=['hello'])
def hello(message):
    if randint(0, 2) == 0:
        bot.send_message(
            message.chat.id, f'–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç {message.from_user.first_name} {message.from_user.last_name}')
    elif randint(0, 2) == 1:
        bot.send_sticker(message.chat.id, open('stikers/helloprog.webp', 'rb'))
    elif randint(0, 2) == 2:
        bot.send_sticker(message.chat.id, open(
            'stikers/–ú—è—É –ø—Ä–∏–≤–µ—Ç.webp', 'rb'))


# seabatle
@bot.message_handler(commands=['seabattle'])
def seabatle(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π',
               url='https://goodchebureck.github.io/Sea-battle/'))
    bot.send_message(
        message.chat.id, "–ü–æ–∏–≥—Ä–∞–π—Ç–µ –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π", reply_markup=markup)


# speedwagon
@bot.message_handler(commands=['speedwagon', '—Å–ø–∏–¥–≤–∞–≥–æ–Ω', 'thebestwaifu'])
def send_photo_speedwagon(message):
    speedwagon = open('img/SpeedWagon.jpg', 'rb')
    bot.send_photo(message.chat.id, speedwagon)


# myid
@bot.message_handler(commands=['MYID', 'MyId', 'Myid', 'myid'])
def MyId(message):
    bot.send_message(message.chat.id, message.from_user.id)


# random
@bot.message_handler(commands=['random'])
def random(message):
    random_change = types.InlineKeyboardMarkup()
    random_change.add(types.InlineKeyboardButton(text='–î–∏–∞–ø–æ–∑–æ–Ω 10', callback_data="range_10"),
                      types.InlineKeyboardButton(text='–î–∏–∞–ø–æ–∑–æ–Ω 100', callback_data="range_100"))
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω: ',
                     reply_markup=random_change)


# –†–∞–∑–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö
@bot.message_handler(commands=['catfact'])
def catfact(message):
    tr = Translator()
    response = requests.get("https://catfact.ninja/fact")
    r = response.json()

    text_f = r["fact"]
    trans_word = tr.translate(text_f, dest="ru", src="en")

    bot.send_message(message.chat.id, trans_word.text)

'''# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å youtube
@bot.message_handler(commands=['dowload_from_youtube'])
def youtube_dowloader(message):
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É")
    bot.register_next_step_handler(msg, dowload_from_youtube)

def dowload_from_youtube(message):
    url = message.text
    audio = {'format': 'bestaudio'}
    video = {'format': 'best'}

    audio_downloader = youtube_dl.YoutubeDL(audio)
    audio_full = audio_downloader.extract_info(url)

    video_downloader = youtube_dl.YoutubeDL(video)
    video_full = video_downloader.extract_info(url)

    bot.send_video(message.chat.id, video_full)
    bot.send_audio(message.chat.id, audio_full)'''




# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['add'])  # /add
def add_func(message):
    sent1 = bot.send_message(message.chat.id, '–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?')
    bot.register_next_step_handler(sent1, add_str)


def add_str(message):
    user_file = str(message.from_user.id) + ".txt"
    with open(f"Users lists/{user_file}", 'a', encoding='utf-8') as user_file:
        user_file.write(str(message.text) + '\n')
    bot.send_message(message.chat.id, str(message.text) + ' –¥–æ–±–∞–≤–ª–µ–Ω–æ')


@bot.message_handler(commands=['check'])  # /check
def check_list(message):
    try:
        sent2 = bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫:')
        # –Ω–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª.txt —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—é—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_file = str(message.from_user.id) + ".txt"
        # —Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ—É –∏–∑ —Ñ–∞–π–ª–∞
        lines = open(f"Users lists/{user_file}",
                     'r', encoding='utf-8').readlines()
        b = ''
        if stat(f"Users lists/{user_file}").st_size == 0:
            bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        else:
            for i in lines:
                b = f'{b + str(lines.index(i)+1)} {i}\n'
            bot.send_message(message.chat.id, str(b))
    except:
        bot.send_message(message.chat.id, "–ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞")


@bot.message_handler(commands=['remove'])  # /remove
def remove_th(message):
    sent3 = bot.send_message(
        message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    bot.register_next_step_handler(sent3, remove_rep)


def remove_rep(message):
    user_file = str(message.from_user.id) + ".txt"
    replace_line(f"Users lists/{user_file}", int(message.text)-1, '')
    bot.send_message(message.chat.id, f"{str(message.text)} —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω")


def replace_line(file_name, line_num, text):
    lines = open(file_name, 'r').readlines()
    lines[line_num] = text
    out = open(file_name, 'w')
    out.writelines(lines)
    out.close()

# –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞
@bot.message_handler(commands=['knbgame'])
def knbgame(message):

    murcup = types.ReplyKeyboardMarkup()
    murcup.add(types.KeyboardButton("–ö–∞–º–µ–Ω—å"),
               types.KeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã"),
               types.KeyboardButton("–ë—É–º–∞–≥–∞"),
               types.KeyboardButton("/knbgame"))

    msg = bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É", reply_markup=murcup)
    bot.register_next_step_handler(msg, KNB_game)


def KNB_game(message):
    list = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    bot_choise = choice(list)
    player_choise = message.text.lower()

    try:
        if bot_choise == player_choise:
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(message.chat.id, "–ù–∏—á—å—è")

        elif bot_choise == "–∫–∞–º–µ–Ω—å" and player_choise == "–Ω–æ–∂–Ω–∏—Ü—ã":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"–ü–æ–±–µ–¥–∏–ª–∞ –ö—É–∫—É—Ä—É–∑–∞ üòÅ, –∞ {message.from_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª üôÅ")

        elif bot_choise == "–Ω–æ–∂–Ω–∏—Ü—ã" and player_choise == "–±—É–º–∞–≥–∞":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"–ü–æ–±–µ–¥–∏–ª–∞ –ö—É–∫—É—Ä—É–∑–∞ üòè, –∞ {message.from_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª üòï")

        elif bot_choise == "–±—É–º–∞–≥–∞" and player_choise == "–∫–∞–º–µ–Ω—å":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"–ü–æ–±–µ–¥–∏–ª–∞ –ö—É–∫—É—Ä—É–∑–∞ ü§™, –∞ {message.from_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª üòê")

        elif bot_choise == "–Ω–æ–∂–Ω–∏—Ü—ã" and player_choise == "–∫–∞–º–µ–Ω—å":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"{message.from_user.first_name} –ø–æ–±–µ–¥–∏–ª. –ê –ª–æ–≤–∫–æ —Ç—ã —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª, —è —Å—Ä–∞–∑—É –∏ –Ω–µ –ø–æ–Ω—è–ª–∞, –º–æ–ª–æ–¥–µ—Ü")

        elif bot_choise == "–±—É–º–∞–≥–∞" and player_choise == "–Ω–æ–∂–Ω–∏—Ü—ã":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"{message.from_user.first_name} –ø–æ–±–µ–¥–∏–ª. –ê –ª–æ–≤–∫–æ —Ç—ã —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª, —è —Å—Ä–∞–∑—É –∏ –Ω–µ –ø–æ–Ω—è–ª–∞, –º–æ–ª–æ–¥–µ—Ü")

        elif bot_choise == "–∫–∞–º–µ–Ω—å" and player_choise == "–±—É–º–∞–≥–∞":
            bot.send_message(
                message.chat.id, f"–ö—É–∫—É—Ä—É–∑–∞ –≤—ã–±—Ä–∞–ª–∞ '{bot_choise}'")
            bot.send_message(
                message.chat.id, f"{message.from_user.first_name} –ø–æ–±–µ–¥–∏–ª. –ê –ª–æ–≤–∫–æ —Ç—ã —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª, —è —Å—Ä–∞–∑—É –∏ –Ω–µ –ø–æ–Ω—è–ª–∞, –º–æ–ª–æ–¥–µ—Ü")
        else:
            bot.send_message(message.chat.id, "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å :(")
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ üòñ")


# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
def recognise(filename):
    language = 'ru_RU'
    r = SRG.Recognizer()

    with SRG.AudioFile(filename) as source:
        audio_text = r.listen(source)
        try:
            text = r.recognize_google(audio_text,language=language)
            return text
        except:
            return "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"


# –û—Ç—Å–ª–µ–∂–∫–∞ callback data
@bot.callback_query_handler(func=lambda call: True)
def calldata_handler(call):
    if call.data == "range_10":
        bot.send_message(call.message.chat.id, f"{randint(0, 10)}")
        bot.answer_callback_query(call.data, "")

    elif call.data == "range_100":
        bot.send_message(call.message.chat.id, f"{randint(0, 10)}")
        bot.answer_callback_query(call.data, "")

    elif call.data == "dollar":
        bot.send_message(call.message.chat.id, f"""
–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {round(exchange_rate_for_bot.rate_usd)} ({exchange_rate_for_bot.rate_usd})
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {exchange_rate_for_bot.rate_change_usd}
""")
        bot.answer_callback_query(call.data, "")

    elif call.data == "euro":
        bot.send_message(call.message.chat.id, f"""
–ö—É—Ä—Å –µ–≤—Ä–æ: {round(exchange_rate_for_bot.rate_eur)} ({exchange_rate_for_bot.rate_eur})
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {exchange_rate_for_bot.rate_change_eur}
""")
        bot.answer_callback_query(call.data, "")

# –û—Ç—Å–ª–µ–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=["text"])
def text_handler(message):
    if message.text.lower() in ["—Ä–∞—Å–∫–∞–∂–∏ —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö", "—Å–∫–∞–∂–∏ —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö", "—Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö",]:
        catfact(message)

# –û—Ç—Å–ª–µ–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def voice_processing(message):

    src = f"voice/{message.from_user.id}.ogg"
    dst = f"voice/{message.from_user.id}_result.wav"

    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

    sound = AudioSegment.from_ogg(src)
    sound.export(dst, format="wav")

    text = recognise(dst)
    bot.reply_to(message, text)

bot.polling(none_stop=True, interval=0)